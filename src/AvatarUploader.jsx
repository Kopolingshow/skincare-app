import React, { useState, useRef, useEffect } from "react";
import { supabase } from "./supabaseClient";
import {
    DropdownMenu,
    DropdownMenuTrigger,
    DropdownMenuContent,
    DropdownMenuItem,
  } from "@/components/ui/dropdown-menu";
import { Dialog, DialogContent } from "@/components/ui/dialog";
import AvatarEditor from "./AvatarEditor";

export default function AvatarUploader({ user, displayName, refreshProfile }) {
  const [avatarUrl, setAvatarUrl] = useState("");
  const [editorOpen, setEditorOpen] = useState(false);
  const [imageToEdit, setImageToEdit] = useState(null);
  const inputRef = useRef();

  
    useEffect(() => {
        const fetchAvatar = async () => {
          const { data, error } = await supabase
            .from("users")
            .select("avatar_url")
            .eq("id", user.id)
            .single();
          if (!error && data?.avatar_url) {
            setAvatarUrl(`${data.avatar_url}?t=${Date.now()}`);
          }
        };
      
        if (user) fetchAvatar();
      }, [user]);

      const loadAvatarUrl = async () => {
        const { data, error } = await supabase
          .from("users")
          .select("avatar_url")
          .eq("id", user.id)
          .single();
        if (!error && data?.avatar_url) {
          setAvatarUrl(data.avatar_url);
        }
      };
  const handleUpload = async (file) => {
    if (!file || !user) return;
    const filePath = `${user.id}/avatar.png`;

    const { error: uploadError } = await supabase.storage
      .from("avatars")
      .upload(filePath, file, { upsert: true });

    if (uploadError) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", uploadError.message);
      return;
    }

    const { data } = supabase.storage.from("avatars").getPublicUrl(filePath);
    const publicUrl = data.publicUrl;

    const { error: updateError } = await supabase
      .from("users")
      .update({ avatar_url: publicUrl })
      .eq("id", user.id);

    if (updateError) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", updateError.message);
      return;
    }

    setAvatarUrl(publicUrl);
    refreshProfile?.();
  };

  return (
    <div className="flex items-center gap-4">
      <DropdownMenu>
  <DropdownMenuTrigger asChild>
    <img
      src={avatarUrl || "/placeholder-avatar.png"}
      alt="avatar"
      className="w-20 h-20 rounded-full object-cover cursor-pointer border"
    />
  </DropdownMenuTrigger>
  <DropdownMenuContent>
    <DropdownMenuItem onClick={() => inputRef.current?.click()}>
      –ó–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ
    </DropdownMenuItem>
    <DropdownMenuItem onClick={() => inputRef.current?.click()}>
      –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    </DropdownMenuItem>
  </DropdownMenuContent>
</DropdownMenu>


      <div>
        <p className="font-medium text-lg">–ü—Ä–∏–≤–µ—Ç, {displayName || "–¥—Ä—É–≥"}!</p>
        <p className="text-sm text-muted-foreground">–¢–≤–æ—è –∫–æ–∂–∞ –±—É–¥–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ–π</p>
      </div>

      <input
  type="file"
  accept="image/*"
  ref={inputRef}
  onChange={(e) => {
    const selected = e.target.files[0];
    if (!selected) return;

    const reader = new FileReader();
    reader.onload = () => {
      setImageToEdit(reader.result);  // –ö–ª–∞–¥—ë–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
      setEditorOpen(true);            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
    };
    reader.readAsDataURL(selected);
  }}
  className="hidden"
/>


<Dialog open={editorOpen} onOpenChange={setEditorOpen}>
  <DialogContent className="max-w-3xl">
    <AvatarEditor
      user={user}
      imageSrc={imageToEdit} // <-- –ø–µ—Ä–µ–¥–∞—ë–º —Ñ–æ—Ç–æ!
      onClose={() => setEditorOpen(false)}
     onSave={async (croppedFile) => {
  await handleUpload(croppedFile);      // ‚è≥ –¥–æ–∂–¥—ë–º—Å—è –∑–∞–≥—Ä—É–∑–∫–∏
  await loadAvatarUrl();                // ‚¨ÖÔ∏è –ø–æ–¥—Ç—è–Ω–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π avatar_url
  refreshProfile?.();                   // üîÑ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è
}}
    />
  </DialogContent>
</Dialog>

    </div>
  );
}
