// –í–∫–ª–∞–¥–∫–∞ "–ú–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞" —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ Supabase –∏ —Ñ–æ—Ä–º–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
import { useEffect, useState } from "react";
import { supabase } from "./supabaseClient";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Plus, MoreVertical } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem
} from "@/components/ui/dropdown-menu";



const INGREDIENT_INFO = {
  "—Ä–µ—Ç–∏–Ω–æ–ª": "–°—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –∫–æ–∂–∏",
  "—Ü–∏–Ω–∫": "–°–Ω–∏–∂–∞–µ—Ç –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ –∏ –∂–∏—Ä–Ω–æ—Å—Ç—å –∫–æ–∂–∏",
  "—Å–∞–ª–∏—Ü–∏–ª–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": "–û—á–∏—â–∞–µ—Ç –ø–æ—Ä—ã, –æ—Ç—à–µ–ª—É—à–∏–≤–∞–µ—Ç",
  "–Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥": "–£–ª—É—á—à–∞–µ—Ç –±–∞—Ä—å–µ—Ä –∫–æ–∂–∏, –æ—Å–≤–µ—Ç–ª—è–µ—Ç –ø—è—Ç–Ω–∞",
  "–≥–∏–∞–ª—É—Ä–æ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ —É–≤–ª–∞–∂–Ω—è–µ—Ç –∫–æ–∂—É",
  "–∞–∑–µ–ª–∞–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": "–°–Ω–∏–∂–∞–µ—Ç –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–æ–Ω –∫–æ–∂–∏",
  "–≤–∏—Ç–∞–º–∏–Ω —Å": "–ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç, –æ—Å–≤–µ—Ç–ª—è–µ—Ç –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—é",
  "–ø–µ–ø—Ç–∏–¥—ã": "–£–∫—Ä–µ–ø–ª—è—é—Ç –∫–æ–∂—É –∏ —Å—Ç–∏–º—É–ª–∏—Ä—É—é—Ç –≤—ã—Ä–∞–±–æ—Ç–∫—É –∫–æ–ª–ª–∞–≥–µ–Ω–∞",
  "–∫–æ—ç–Ω–∑–∏–º q10": "–ë–æ—Ä–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ä–µ–Ω–∏–µ–º –∏ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ —Ä–∞–¥–∏–∫–∞–ª–∞–º–∏",
  "–∞—Ä–±—É—Ç–∏–Ω": "–û—Å–≤–µ—Ç–ª—è–µ—Ç –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –µ—ë –ø–æ—è–≤–ª–µ–Ω–∏–µ",
  "—Ü–µ—Ä–∞–º–∏–¥—ã": "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –∑–∞—â–∏—Ç–Ω—ã–π –±–∞—Ä—å–µ—Ä –∫–æ–∂–∏"
};

export default function MyProductsTab({ user }) {
  const [showSavedMessage, setShowSavedMessage] = useState(false);
  const [showAddedMessage, setShowAddedMessage] = useState(false);
  const [showDeletedMessage, setShowDeletedMessage] = useState(false);
  const [products, setProducts] = useState([]);
  const [selected, setSelected] = useState(null);
  const [open, setOpen] = useState(false);
  const [addOpen, setAddOpen] = useState(false);
  const [editOpen, setEditOpen] = useState(false);
  const [confirmDelete, setConfirmDelete] = useState(false);

  const [newProduct, setNewProduct] = useState({
    name: "",
    description: "",
    time_of_use: "",
    category: "",
    ingredients: ""
  });

  const fetchProducts = async () => {
    const { data } = await supabase
      .from("products")
      .select("*")
      .eq("user_id", user.id)
      .order("created_at", { ascending: false });
    if (data) setProducts(data);
  };

  useEffect(() => {
    if (!user) return;
    fetchProducts();
  }, [user]);

  const openProduct = (product) => {
    setSelected(product);
    setOpen(true);
  };

  const handleAdd = async () => {
    const { name, description, time_of_use, category, ingredients } = newProduct;
    const parsedIngredients = ingredients.split(",").map(i => i.trim());
  
    const { error } = await supabase.from("products").insert({
      user_id: user.id,
      name,
      description,
      time_of_use,
      category,
      ingredients: parsedIngredients,
      in_routine: true
    });
  
    if (!error) {
      setAddOpen(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
      setNewProduct({ // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—è
        name: "",
        description: "",
        time_of_use: "",
        category: "",
        ingredients: ""
      });
      setSelected(null);
      fetchProducts();
      setShowAddedMessage(true);
      setTimeout(() => setShowAddedMessage(false), 2000);
    }
  };
  

  const handleEdit = async () => {
    const { id } = selected;
    const { name, description, time_of_use, category, ingredients } = newProduct;
    const parsedIngredients = ingredients.split(",").map(i => i.trim());
    const { error } = await supabase.from("products").update({
      name,
      description,
      time_of_use,
      category,
      ingredients: parsedIngredients
    }).eq("id", id);
    if (!error) {
      setEditOpen(false);
      setSelected(null);
      fetchProducts();
  
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      setShowSavedMessage(true);
      setTimeout(() => setShowSavedMessage(false), 2000);
    }
  };
  

  const handleDelete = async () => {
    const { id } = selected;
    const { error } = await supabase.from("products").delete().eq("id", id);
    if (!error) {
      setConfirmDelete(false);
      setOpen(false);
      setSelected(null);
      fetchProducts();
      setShowDeletedMessage(true);
      setTimeout(() => setShowDeletedMessage(false), 2000);
    }
  };
  

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-medium">–ú–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞</h2>
        <Button variant="outline" onClick={() => setAddOpen(true)}>
          <Plus className="w-4 h-4 mr-1" /> –î–æ–±–∞–≤–∏—Ç—å
        </Button>
      </div>

      {products.length === 0 ? (
        <p className="text-sm text-muted-foreground">–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤</p>
      ) : (
        <div className="grid gap-4">
  {products.map((product) => (
    <Card
      key={product.id}
      className="bg-white rounded-2xl shadow-md overflow-hidden transition-transform hover:scale-[1.01]"
    >
      <CardContent
        className="p-4 cursor-pointer"
        onClick={(e) => {
          if (e.target.closest("button")) return;
          openProduct(product);
        }}
      >
        <div className="flex justify-between items-start">
          <div className="space-y-1">
            <p className="font-semibold text-base text-gray-900">{product.name}</p>
            <p className="text-xs text-gray-500">
              {product.category} ‚Ä¢ {product.time_of_use}
            </p>
          </div>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                size="icon"
                variant="ghost"
                className="hover:bg-gray-100"
                onClick={(e) => e.stopPropagation()}
              >
                <MoreVertical className="w-4 h-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem
                onClick={(e) => {
                  e.stopPropagation();
                  setSelected(product);
setNewProduct({
  ...product,
  ingredients: Array.isArray(product.ingredients)
    ? product.ingredients.join(", ")
    : product.ingredients,
});
setEditOpen(true);
                }}
              >
                –ò–∑–º–µ–Ω–∏—Ç—å
              </DropdownMenuItem>
              <DropdownMenuItem
                className="text-red-500"
                onClick={(e) => {
                  e.stopPropagation();
                  setSelected(product);
                  setConfirmDelete(true);
                }}
              >
                –£–¥–∞–ª–∏—Ç—å
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardContent>
    </Card>
  ))}
</div>

      )}

      <Dialog open={open} onOpenChange={setOpen}>
      <DialogContent className="max-w-md rounded-2xl shadow-lg">
  {selected && (
    <div className="space-y-4">
      <div className="space-y-1">
        <h3 className="text-2xl font-semibold text-gray-900">{selected.name}</h3>
        <p className="text-sm text-gray-600">{selected.description}</p>
      </div>

      <div>
        <h4 className="text-sm font-medium text-gray-700 mb-2">üí° –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h4>
        <ul className="list-disc list-inside space-y-1 text-sm text-gray-800">
          {selected.ingredients.map((item, i) => (
            <li key={i}>
              <strong>{item}:</strong>{" "}
              {INGREDIENT_INFO[item.toLowerCase()] || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}
            </li>
          ))}
        </ul>
      </div>

      <Button
        className="w-full py-2 rounded-xl bg-black text-white hover:bg-gray-800 transition-all"
        onClick={() =>
          window.open(
            `https://www.ozon.ru/search/?text=${encodeURIComponent(selected.name)}`,
            "_blank"
          )
        }
      >
        –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ Ozon
      </Button>
    </div>
  )}
</DialogContent>

      </Dialog>

      {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ */}
      <Dialog open={addOpen} onOpenChange={setAddOpen}>
      <DialogContent className="max-w-md rounded-2xl">
  <DialogTitle className="text-xl font-semibold text-gray-900">–î–æ–±–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–æ</DialogTitle>
  <div className="space-y-4 pt-2">
    <div className="space-y-1">
      <Label className="text-sm text-gray-700">–ù–∞–∑–≤–∞–Ω–∏–µ</Label>
      <Input
        className="rounded-xl"
        value={newProduct.name}
        onChange={(e) => setNewProduct(p => ({ ...p, name: e.target.value }))}
      />
    </div>
    <div className="space-y-1">
      <Label className="text-sm text-gray-700">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
      <Input
        className="rounded-xl"
        value={newProduct.description}
        onChange={(e) => setNewProduct(p => ({ ...p, description: e.target.value }))}
      />
    </div>
    <div className="space-y-1">
      <Label className="text-sm text-gray-700">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
      <Input
        className="rounded-xl"
        value={newProduct.category}
        onChange={(e) => setNewProduct(p => ({ ...p, category: e.target.value }))}
      />
    </div>
    <div className="space-y-1">
      <Label className="text-sm text-gray-700">–í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</Label>
      <Input
        className="rounded-xl"
        placeholder="—É—Ç—Ä–æ / –≤–µ—á–µ—Ä / –æ–±–∞"
        value={newProduct.time_of_use}
        onChange={(e) => setNewProduct(p => ({ ...p, time_of_use: e.target.value }))}
      />
    </div>
    <div className="space-y-1">
      <Label className="text-sm text-gray-700">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</Label>
      <Input
        className="rounded-xl"
        value={newProduct.ingredients}
        onChange={(e) => setNewProduct(p => ({ ...p, ingredients: e.target.value }))}
      />
    </div>
    <Button
      onClick={handleAdd}
      className="w-full py-2 bg-black text-white rounded-xl hover:bg-gray-800 transition-all"
    >
      –î–æ–±–∞–≤–∏—Ç—å
    </Button>
  </div>
</DialogContent>

      </Dialog>

      {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */}
      <Dialog open={editOpen} onOpenChange={setEditOpen}>
  <DialogContent className="max-w-md rounded-2xl">
    <DialogTitle className="text-xl font-semibold text-gray-900">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–æ</DialogTitle>
    <div className="space-y-4 pt-2">
      <div className="space-y-1">
        <Label className="text-sm text-gray-700">–ù–∞–∑–≤–∞–Ω–∏–µ</Label>
        <Input
          className="rounded-xl"
          value={newProduct.name}
          onChange={(e) =>
            setNewProduct((p) => ({ ...p, name: e.target.value }))
          }
        />
        
      </div>
      <div className="space-y-1">
        <Label className="text-sm text-gray-700">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
        <Input
          className="rounded-xl"
          value={newProduct.description}
          onChange={(e) =>
            setNewProduct((p) => ({ ...p, description: e.target.value }))
          }
        />
      </div>
      <div className="space-y-1">
        <Label className="text-sm text-gray-700">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
        <Input
          className="rounded-xl"
          value={newProduct.category}
          onChange={(e) =>
            setNewProduct((p) => ({ ...p, category: e.target.value }))
          }
        />
      </div>
      <div className="space-y-1">
        <Label className="text-sm text-gray-700">–í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</Label>
        <Input
          className="rounded-xl"
          placeholder="—É—Ç—Ä–æ / –≤–µ—á–µ—Ä / –æ–±–∞"
          value={newProduct.time_of_use}
          onChange={(e) =>
            setNewProduct((p) => ({ ...p, time_of_use: e.target.value }))
          }
        />
      </div>
      <div className="space-y-1">
        <Label className="text-sm text-gray-700">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</Label>
        <Input
          className="rounded-xl"
          value={newProduct.ingredients}
          onChange={(e) =>
            setNewProduct((p) => ({ ...p, ingredients: e.target.value }))
          }
        />
      </div>
      <Button
        onClick={handleEdit}
        className="w-full py-2 bg-black text-white rounded-xl hover:bg-gray-800 transition-all"
      >
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
      </Button>
    </div>
  </DialogContent>
</Dialog>


      {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è */}
      <Dialog open={confirmDelete} onOpenChange={setConfirmDelete}>
        <DialogContent>
          <DialogTitle>–£–¥–∞–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–æ?</DialogTitle>
          <DialogDescription>
            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <strong>{selected?.name}</strong>?
          </DialogDescription>
          <div className="flex justify-end gap-2">
            <Button variant="outline" onClick={() => setConfirmDelete(false)}>–û—Ç–º–µ–Ω–∞</Button>
            <Button variant="destructive" onClick={handleDelete}>–£–¥–∞–ª–∏—Ç—å</Button>
          </div>
        </DialogContent>
      </Dialog>
      {showSavedMessage && (
  <div className="fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-green-100 text-green-800 px-4 py-2 rounded-xl shadow-md text-sm font-medium flex items-center gap-2 z-50">
    ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
  </div>
)}

{showAddedMessage && (
  <div className="fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-blue-100 text-blue-800 px-4 py-2 rounded-xl shadow-md text-sm font-medium flex items-center gap-2 z-50">
    ‚ûï –°—Ä–µ–¥—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
  </div>
)}

{showDeletedMessage && (
  <div className="fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-red-100 text-red-800 px-4 py-2 rounded-xl shadow-md text-sm font-medium flex items-center gap-2 z-50">
    üóë –°—Ä–µ–¥—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ
  </div>
)}
    </div>
  );
}
